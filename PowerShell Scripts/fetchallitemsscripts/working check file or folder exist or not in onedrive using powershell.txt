# Config Variables
$SiteURL = "https://infoblox-my.sharepoint.com/personal/"
$CSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\rburton.csv"
$OutputCSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\rburtonexport.csv"

# Check if the current user has permission to access the CSV file
if (-not (Test-Path $CSVFile)) {
    Write-Host "CSV file not found: $CSVFile"
    return
}

if (-not (Get-Module -Name SharePointPnPPowerShellOnline -ListAvailable)) {
    Install-Module SharePointPnPPowerShellOnline -Scope CurrentUser -Force
}

Import-Module SharePointPnPPowerShellOnline -DisableNameChecking

# Prompt for credentials
$UserCredential = Get-Credential

$previousDriveOwner = ""
$PermissionResults = @()

try {
    $CSVData = Import-CSV $CSVFile

    foreach ($Row in $CSVData) {
        try {
            $SourceFolderPath = $Row.Path -replace".com","-com"
            $OwnerEmailID = $Row.DriveOwner
            $ListName = "Documents"
            $ListNames = "/Documents/G Data/Cyberint program"

            # Check if OwnerEmailID is empty or null
            if ([string]::IsNullOrEmpty($OwnerEmailID)) {
                Write-Host "Owner Email ID is empty for path: $SourceFolderPath" -ForegroundColor Yellow
                continue
            }

            # Get File Extension
            $extension = switch ($Row.type) {
                "application/vnd.google-apps.document" { ".docx" }
                "application/vnd.google-apps.spreadsheet" { ".xlsx" }
                "application/vnd.google-apps.presentation" { ".pptx" }
                
                "application/vnd.google-apps.folder" { $null } # Folder, no extension
                default { "" }
            }

            # Construct file name with extension
            $FileName = $Row.Name + $extension

            # Connect to OneDrive if the owner has changed or if it's the first iteration
            if ($previousDriveOwner -ne $OwnerEmailID) {
                Write-Host "Connecting to OneDrive for $OwnerEmailID..." -ForegroundColor Yellow
                $OneDrivePath = $OwnerEmailID.Replace('@', '_').Replace('.', '_')
                $OneDriveUrl = $SiteURL + $OneDrivePath
                Connect-PnPOnline -Url $OneDriveUrl -Credentials $UserCredential
                $previousDriveOwner = $OwnerEmailID
            }

            # Construct relative URL for the item
            $lastSlashIndex = $SourceFolderPath.LastIndexOf("/")
            $fileName = $SourceFolderPath.Substring($lastSlashIndex + 1)
            $filePath = $SourceFolderPath.Substring(0, $lastSlashIndex + 1)

            # Check if the file name contains special characters
            if ($fileName -match "[\(\&\#\:\*]") {
                $fileName = $fileName -replace "[\(\&\#\:\*]", "-"
            }

            # Construct full URL for the item
            $ItemRelativeURL = "/Documents/G Data/Cyberint program$filePath$fileName$extension"
            $OneDriveItemURL = $OneDriveUrl + $ItemRelativeURL

            if ($Row.type -eq "application/vnd.google-apps.folder") {
                $ItemType = "Folder"
                Write-Host "Processing folder: $OneDriveItemURL" -ForegroundColor Yellow
            } else {
                $ItemType = "File"
                Write-Host "Processing file: $OneDriveItemURL" -ForegroundColor Green
            }

            # Check if the item is a file or folder based on its type
            if ($Row.type -eq "application/vnd.google-apps.folder") {
                # It's a folder
                $Item = Get-PnPFolder -Url $ItemRelativeURL
                if ($Item -eq $null) {
                    Write-Host "Folder not found at $ItemRelativeURL" -ForegroundColor Red
                    $PermissionResults += [PSCustomObject]@{
                        ItemPath = $Row.Path
                        ItemType = "Folder"
                        MimeType = $Row.type
                        ErrorMessage = "Folder not found"
                        OneDriveUrl = $OneDriveItemURL
                        DriveOwner = $OwnerEmailID
                    }
                    continue
                }
            } else {
                # It's a file
                $Item = Get-PnPFile -Url $ItemRelativeURL
                if ($Item -eq $null) {
                    Write-Host "File not found at $ItemRelativeURL" -ForegroundColor Red
                    $PermissionResults += [PSCustomObject]@{
                        ItemPath = $Row.Path
                        ItemType = "File"
                        MimeType = $Row.type
                        ErrorMessage = "File not found"
                        OneDriveUrl = $OneDriveItemURL
                        DriveOwner = $OwnerEmailID
                    }
                    continue
                }
            }

            $PermissionResults += [PSCustomObject]@{
                ItemPath = $Row.Path
                ItemType = if ($Row.type -eq "application/vnd.google-apps.folder") { "Folder" } else { "File" }
                MimeType = $Row.type
                OneDriveUrl = $OneDriveItemURL
                DriveOwner = $OwnerEmailID
            }
            Write-Host "$ItemType -  $ItemRelativeURL" -ForegroundColor Green

        } catch {
            Write-Host "Error: $_" -ForegroundColor Red
            $PermissionResults += [PSCustomObject]@{
                ItemPath = $Row.Path
                ItemType = if ($Row.type -eq "application/vnd.google-apps.folder") { "Folder" } else { "File" }
                MimeType = $Row.type
                ErrorMessage = $_.Exception.Message
                DriveOwner = $OwnerEmailID
            }
        }
    }

    # Export the permission results to CSV
    Write-Host "Exporting Results to CSV..." -ForegroundColor Yellow
    $PermissionResults | Export-Csv -Path $OutputCSVFile -NoTypeInformation -Force
    Write-Host "Results exported to $OutputCSVFile" -ForegroundColor Cyan

} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}
