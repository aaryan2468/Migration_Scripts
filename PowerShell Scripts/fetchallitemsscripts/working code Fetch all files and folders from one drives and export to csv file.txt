# Config Variables
$SiteURL = "https://infoblox-my.sharepoint.com/personal/"
$CSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\ITOnedriveslist.csv"
$OutputCSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\Onedrivefilecountandsizes.csv"
$ErrorLog = "C:\Errors.log"

# Function to log errors
function Log-Error {
    param([string]$ErrorMessage)
    $ErrorMessage | Out-File -FilePath $ErrorLog -Append
}

try {
    # Check if the current user has permission to access the CSV file
    if (-not (Test-Path $CSVFile)) {
        Write-Host "CSV file not found: $CSVFile"
        return
    }

    # Check and install the SharePointPnPPowerShellOnline module if not available
    if (-not (Get-Module -Name SharePointPnPPowerShellOnline -ListAvailable)) {
        Install-Module SharePointPnPPowerShellOnline -Scope CurrentUser -Force
    }

    # Import the SharePointPnPPowerShellOnline module
    Import-Module SharePointPnPPowerShellOnline -DisableNameChecking

    $previousDriveOwner = ""
    $OutputData = @()

    # Import data from the CSV file
    $CSVData = Import-Csv $CSVFile

    foreach ($Row in $CSVData) {
        try {
            $OwnerEmailID = $Row.Email
            Write-Host "Processing Owner: $OwnerEmailID"

            # Check if OwnerEmailID is empty or null
            if ([string]::IsNullOrEmpty($OwnerEmailID)) {
                Write-Host "Owner Email ID is empty for a row in the CSV file."
                continue
            }

            # Connect to the user's OneDrive if the owner email has changed
            if ($previousDriveOwner -ne $OwnerEmailID) {
                $OneDrivePath = $OwnerEmailID.Replace('@', '_').Replace('.', '_')
                $OneDriveUrl = $SiteURL + $OneDrivePath
                Write-Host "Connecting to OneDrive: $OneDriveUrl"
                Connect-PnPOnline -Url $OneDriveUrl -UseWebLogin
                $previousDriveOwner = $OwnerEmailID
            }

            # Get all files and folders in the 'G Data' folder recursively
            $FolderPath = "/Documents/G Data"
            Write-Host "Retrieving items from folder: $FolderPath"
            $Items = Get-PnPFolderItem -FolderSiteRelativeUrl $FolderPath -Recursive
            Write-Host "Number of items retrieved: $($Items.Count)"

            # Iterate through each item and retrieve permissions
            foreach ($Item in $Items) {
                # Debugging statement
                Write-Host "Processing item: $($Item.Name)"

                $ItemName = $Item.Name
                $ItemURL = $Item.ServerRelativeUrl

                $PermissionLevels = @()
                $AssignedUsers = @()

                # Check if the item is a file by checking for extension
                if ($ItemName -match "\.\w+$") {
                    $ItemType = "File"
                    $file = Get-PnPFile -Url $ItemURL -AsListItem
                   
                    # Add data to the output array for each permission
                    $OutputData += [PSCustomObject]@{
                        "OwnerEmailID" = $OwnerEmailID
                        "ItemType" = $ItemType
                        "ItemName" = $ItemName
                        "ItemURL" = $ItemURL
                    }
                } else {
                    $ItemType = "Folder"
                    $folder = Get-PnPFolder -Url $ItemURL -Includes ListItemAllFields.RoleAssignments, ListItemAllFields.HasUniqueRoleAssignments

                    # Add data to the output array for each permission
                    $OutputData += [PSCustomObject]@{
                        "OwnerEmailID" = $OwnerEmailID
                        "ItemType" = $ItemType
                        "ItemName" = $ItemName
                        "ItemURL" = $ItemURL
                    }
                }
            }
        }
        catch {
            $ErrorMessage = "Error occurred for Owner: $OwnerEmailID - $_"
            Write-Host $ErrorMessage
            Log-Error -ErrorMessage $ErrorMessage
        }
    }

    # Export data to CSV file
    $OutputData | Export-Csv -Path $OutputCSVFile -NoTypeInformation
    Write-Host "Data exported to CSV file: $OutputCSVFile"
}
catch {
    $ErrorMessage = "Error occurred: $_"
    Write-Host $ErrorMessage
    Log-Error -ErrorMessage $ErrorMessage
}
finally {
    # Disconnect from SharePoint
    Disconnect-PnPOnline
}
