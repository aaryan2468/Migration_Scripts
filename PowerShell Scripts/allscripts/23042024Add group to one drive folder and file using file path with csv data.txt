# Config Variables
$SiteURL = "https://infoblox-my.sharepoint.com/personal/"
$CSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\testing.csv"
$OutputCSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\fileschecking.csv"

# Check if the current user has permission to access the CSV file
if (-not (Test-Path $CSVFile)) {
    Write-Host "CSV file not found: $CSVFile"
    return
}

if (-not (Get-Module -Name SharePointPnPPowerShellOnline -ListAvailable)) {
    Install-Module SharePointPnPPowerShellOnline -Scope CurrentUser -Force
}

Import-Module SharePointPnPPowerShellOnline -DisableNameChecking

$previousDriveOwner = ""
$OutputData = @()

try {
    $CSVData = Import-CSV $CSVFile

    foreach ($Row in $CSVData) {
        try {
            $SourceFolderPath = $Row.Path
            $OwnerEmailID = $Row.DriveOwner
            $ListName = "Documents"
            $ListNames = "/Documents/G Data"
            $UserAccount = "c:0-.f|rolemanager|spo-grid-all-users/ccf6dc4a-9fe9-4c20-85a6-46d2709e8435"
            $PermissionLevel = $Row.permissions

            # Check the permission level and set the role accordingly
            switch ($PermissionLevel) {
                "Viewer" { $Role = 'Read' }
                "commenter" { $Role = 'Read' }
                "Editor" { $Role = 'Edit' }
                "owner" { $Role = 'Full Control' }
                default { $Role = 'Read' }
            }

            # Check if OwnerEmailID is empty or null
            if ([string]::IsNullOrEmpty($OwnerEmailID)) {
                Write-Host "Owner Email ID is empty for path: $SourceFolderPath"
                continue
            }

            if ($previousDriveOwner -ne $OwnerEmailID) {
                $OneDrivePath = $OwnerEmailID.Replace('@', '_').Replace('.', '_')
                $OneDriveUrl = $SiteURL + $OneDrivePath
                Connect-PnPOnline -Url $OneDriveUrl -UseWebLogin
                $previousDriveOwner = $OwnerEmailID
            }

            # Construct relative URL for the item
            $ItemRelativeURL = $ListNames + $SourceFolderPath
            $onedrivespath = $OneDriveUrl + $ItemRelativeURL

            Write-Host "Onedrive path - $onedrivespath" -ForegroundColor Cyan

            # Check if the item is a file or folder
            if ($SourceFolderPath -match "\.\w+$") {
                # It's a file
                $Item = Get-PnPFile -Url $ItemRelativeURL -ErrorAction SilentlyContinue
                if ($Item -eq $null) {
                    Write-Host "File not found at $ItemRelativeURL"
                    $OutputData += [PSCustomObject]@{
                        Path        = $SourceFolderPath
                        DriveOwner  = $OwnerEmailID
                        Permissions = $PermissionLevel
                        User=$UserAccount
                        Status      = "File not found"
                    }
                } else {
                    Set-PnPListItemPermission -List $ListName -Identity $Item.ListItemAllFields -User $UserAccount -AddRole $Role
                    Write-Host "File-OnedriveUrl-$onedrivespath ; $Role Permission granted to file for $ItemRelativeURL - for user: $UserAccount" -ForegroundColor Yellow
                    $OutputData += [PSCustomObject]@{
                        Path        = $SourceFolderPath
                        DriveOwner  = $OwnerEmailID
                        User=$UserAccount
                        Permissions = $PermissionLevel
                        Status      = "Permission granted"
                    }
                }
            } else {
                # It's a folder
                $Item = Get-PnPFolder -Url $ItemRelativeURL -ErrorAction SilentlyContinue
                if ($Item -eq $null) {
                    Write-Host "Folder not found at $ItemRelativeURL"
                    $OutputData += [PSCustomObject]@{
                        Path        = $SourceFolderPath
                        DriveOwner  = $OwnerEmailID
                        User=$UserAccount
                        Permissions = $PermissionLevel
                        Status      = "Folder not found"
                    }
                } else {
                    Set-PnPListItemPermission -List $ListName -Identity $Item.ListItemAllFields -User $UserAccount -AddRole $Role
                    Write-Host "Folder-OnedriveUrl-$onedrivespath ; $Role Permission granted to folder $ItemRelativeURL - for user: $UserAccount" -ForegroundColor Green
                    $OutputData += [PSCustomObject]@{
                        Path        = $SourceFolderPath
                        DriveOwner  = $OwnerEmailID
                        User=$UserAccount
                        Permissions = $PermissionLevel
                        Status      = "Permission granted"
                    }
                }
            }
        } catch {
            Write-Host "Error: $_"
            $OutputData += [PSCustomObject]@{
                Path        = $Row.Path
                DriveOwner  = $Row.DriveOwner
                User=$UserAccount
                Permissions = $Row.permissions
                Status      = "Error: $_"
            }
        }
    }

    # Export the output data to a CSV file
    $OutputData | Export-Csv -Path $OutputCSVFile -NoTypeInformation
    Write-Host "Output data exported to $OutputCSVFile"

} catch {
    Write-Host "Error: $_"
}
