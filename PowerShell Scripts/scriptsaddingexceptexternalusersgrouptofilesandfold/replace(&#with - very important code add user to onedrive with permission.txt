# Config Variables
$SiteURL = "https://infoblox-my.sharepoint.com/personal/"
$CSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\(&#checking.csv"
$OutputCSVFile = "C:\Users\vpoojari\OneDrive - Infoblox Inc\Desktop\10052024exportdata.csv"

# Check if the CSV file exists
if (-not (Test-Path $CSVFile)) {
    Write-Host "CSV file not found: $CSVFile" -ForegroundColor Red
    Write-Host "Please make sure the CSV file exists at the specified path."
    return
}

# Check if SharePointPnPPowerShellOnline module is installed, if not install it
if (-not (Get-Module -Name SharePointPnPPowerShellOnline -ListAvailable)) {
    Install-Module SharePointPnPPowerShellOnline -Scope CurrentUser -Force
}

Import-Module SharePointPnPPowerShellOnline -DisableNameChecking

# Initialize variables
$previousDriveOwner = ""
$PermissionResults = @()

try {
    # Import data from CSV
    $CSVData = Import-CSV $CSVFile

    foreach ($Row in $CSVData) {
        try {
            # Extract data from CSV row
            $SourceFolderPath = $Row.Path -replace "&","-"
            $OwnerEmailID = $Row.DriveOwner
            $ListName = "Documents"
            $ListNames = "/Documents/G Data/"
            $UserAccount = $Row.emailAddress 
            $PermissionLevel = $Row.Permission

            # Check if OwnerEmailID is empty or null
            if ([string]::IsNullOrEmpty($OwnerEmailID)) {
                Write-Host "Owner Email ID is empty for path: $SourceFolderPath"
                continue
            }

            # Connect to OneDrive if the owner has changed
            if ($previousDriveOwner -ne $OwnerEmailID) {
                $OneDrivePath = $OwnerEmailID.Replace('@', '_').Replace('.', '_')
                $OneDriveUrl = $SiteURL + $OneDrivePath
                Connect-PnPOnline -Url $OneDriveUrl -UseWebLogin
                $previousDriveOwner = $OwnerEmailID
            }

            # Construct relative URL for the item
            $lastSlashIndex = $SourceFolderPath.LastIndexOf("/")
            $fileName = $SourceFolderPath.Substring($lastSlashIndex + 1)
            $filePath = $SourceFolderPath.Substring(0, $lastSlashIndex + 1)

            # Check if the file name contains special characters
            if ($fileName -match "[\(\&\#]") {
                $fileName = $fileName -replace "[\(\&\#]", "-"
                $ItemRelativeURL = "/Documents/G Data$filePath$fileName"
                Write-Host "Path after replacement: $ItemRelativeURL"
            } else {
                $ItemRelativeURL = "$OneDriveUrl/Documents/G Data$filePath$fileName"
                Write-Host "No replacement needed. Original path: $ItemRelativeURL"
            }
            
            $OneDriveItemURL = $OneDriveUrl + $ItemRelativeURL

            Write-Host "OneDrive path: $OneDriveItemURL" -ForegroundColor Cyan

            # Check the permission level and set the role accordingly
            switch ($PermissionLevel) {
                "reader" { $Role = 'Read' }
                "commenter" { $Role = 'Read' }
                "Writer" { $Role = 'Edit' }
                "owner" { $Role = 'Full Control' }
                default { $Role = 'Read' }
            }

            # Check if the item is a file or folder
            if ($SourceFolderPath -match "\.\w+$") {
                # It's a file
                $Item = Get-PnPFile -Url $ItemRelativeURL
                if ($Item -eq $null) {
                    Write-Host "File not found at $ItemRelativeURL" -ForegroundColor Red
                    $PermissionResults += [PSCustomObject]@{
                        ItemPath = $Row.Path
                        ItemType = "File"
                        PermissionLevel = $PermissionLevel  # Add this line to capture the permission level
                        PermissionGranted = "No"
                        ErrorMessage = "File not found"
                        OnedriveUrl = $OneDriveItemURL
                        DriveOwner=$OwnerEmailID
                        User=$UserAccount
                    }
                    continue
                } else {
                    Set-PnPListItemPermission -List $ListName -Identity $Item.ListItemAllFields -User $UserAccount -AddRole $Role
                    $PermissionResults += [PSCustomObject]@{
                        ItemPath = $Row.Path
                        ItemType = "File"
                        PermissionLevel = $PermissionLevel  # Add this line to capture the permission level
                        PermissionGranted = "Yes"
                        OnedriveUrl = $OneDriveItemURL
                        DriveOwner=$OwnerEmailID
                        User=$UserAccount
                    }
                    Write-Host "File-$UserAccount-$Role permission granted to file: $ItemRelativeURL" -ForegroundColor Yellow
                }
            } else {
                # It's a folder
                $Item = Get-PnPFolder -Url $ItemRelativeURL
                if ($Item -eq $null) {
                    Write-Host "Folder not found at $ItemRelativeURL" -ForegroundColor Red
                    $PermissionResults += [PSCustomObject]@{
                        ItemPath = $Row.Path
                        ItemType = "Folder"
                        PermissionLevel = $PermissionLevel  # Add this line to capture the permission level
                        PermissionGranted = "No"
                        ErrorMessage = "Folder not found"
                        OnedriveUrl = $OneDriveItemURL
                        DriveOwner=$OwnerEmailID
                        User=$UserAccount
                    }
                    continue
                } else {
                    Set-PnPListItemPermission -List $ListName -Identity $Item.ListItemAllFields -User $UserAccount -AddRole $Role
                    $PermissionResults += [PSCustomObject]@{
                        ItemPath = $Row.Path
                        ItemType = "Folder"
                        PermissionLevel = $PermissionLevel  # Add this line to capture the permission level
                        PermissionGranted = "Yes"
                        OnedriveUrl = $OneDriveItemURL
                        DriveOwner=$OwnerEmailID
                        User=$UserAccount
                    }
                    Write-Host "Folder-$UserAccount-$Role permission granted to folder: $ItemRelativeURL" -ForegroundColor Green
                }
            }
        } catch {
            Write-Host "Error: $_"
            $PermissionResults += [PSCustomObject]@{
                ItemPath = $Row.Path
                ItemType = "Error"
                PermissionLevel = $PermissionLevel  # Add this line to capture the permission level
                PermissionGranted = "No"
                ErrorMessage = $_.Exception.Message
                DriveOwner=$OwnerEmailID
                User=$UserAccount
            }
        }
    }

    # Export the permission results to CSV
    $PermissionResults | Export-Csv -Path $OutputCSVFile -NoTypeInformation -Force
    Write-Host "Permission results exported to $OutputCSVFile" -ForegroundColor Cyan
} catch {
    Write-Host "Error: $_"
}
